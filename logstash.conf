input { 
	file {
		start_position => "beginning"
		path => ["/Users/pauli/Projects/Germanwings/logs/**/access.log"]
		type => "cq-access"
	}
	file {
		start_position => "beginning"
		path => ["/Users/pauli/Projects/Germanwings/logs/**/request.log"]
		type => "cq-request"
	}
	file {
		start_position => "beginning"
    	path => ["/Users/pauli/Projects/Germanwings/logs/**/gw.log"]
    	type => "gw-log"
    }
    file {
    	start_position => "beginning"
    	path => ["/Users/pauli/Projects/Germanwings/logs/**/error.log"]
    	type => "error-log"
    }
#  tcp {
#		type => "gw-log"
#		port => 3333
#	}
}

filter {
	if [type] == "cq-access" {
		grok { 
			match => [ "message", "%{IPORHOST:clientip} - %{USER:ident} %{HTTPDATE:timestamp} %{QS}" ]
		}
		date {
			match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
		}
	} else if [type] == "cq-request" {
		grok {
			match => [ "message", "^%{HTTPDATE:timestamp} \[%{NUMBER:id}\]"]
		}
		multiline {
			pattern => "^%{HTTPDATE:timestamp} \[%{NUMBER:id}\] <-"
			negate => "true"
			what => "next"
			stream_identity => "%{id}"
		}
		date {
				match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
		}
		mutate {
	    	gsub => [
	    		"message","\n"," ",
	    		"message","\r",""
    		]
	  	}
	  	grok {
				match => [ "message", "^%{HTTPDATE:timestamp} \[%{NUMBER:id}\] -> %{WORD:method} %{NOTSPACE:request} HTTP/%{NUMBER:httpversion} .* %{NUMBER:status} %{NOTSPACE:contentType} %{NUMBER:response:int}ms$"]
		}
	} else if [type] == "gw-log" {
		multiline {
			pattern => "^%{DATESTAMP}"
			negate => "true"
			what => "previous"
		}
		grok {
			match => [ "message", "%{DATESTAMP:timestamp} \*%{NOTSPACE:severe}\*"]
		}
		date {
			match => [ "timestamp" , "dd.MM.yyyy HH:mm:ss.SSS" ]
		}
	}
	else if [type] == "error-log" {
		multiline {
			pattern => "^%{DATESTAMP}"
			negate => "true"
			what => "previous"
		}
		grok {
			match => [ "message", "%{DATESTAMP:timestamp} \*%{NOTSPACE:severe}\*"]
		}
		date {
			match => [ "timestamp" , "dd.MM.yyyy HH:mm:ss.SSS" ]
		}
	}
}

output {
  elasticsearch { host => localhost }
#  stdout { codec => rubydebug }
}